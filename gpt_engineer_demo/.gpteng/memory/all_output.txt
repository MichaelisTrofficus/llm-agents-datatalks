Let's start by creating the necessary files and directories. We will need the following files:

1. `requirements.txt`: This file will contain all the necessary packages that need to be installed.
2. `src/data.py`: This file will contain the code to generate the fake ratings matrix and the custom Dataset class.
3. `src/model.py`: This file will contain the code for the Matrix Factorization model.
4. `src/train.py`: This file will be the entry point of our program. It will contain the code to train the model and save it.

Let's start with the `requirements.txt` file:

requirements.txt
```
torch==1.8.1
pandas==1.2.4
scikit-learn==0.24.2
numpy==1.20.3
tqdm==4.60.0
```

Now, let's move on to the `src/data.py` file:

src/data.py
```python
import pandas as pd
import numpy as np
from torch.utils.data import Dataset

# Generate a fake ratings matrix
def generate_ratings(n_rows=1000, n_users=1000, n_items=1000):
    user_ids = np.random.randint(0, n_users, n_rows)
    item_ids = np.random.randint(0, n_items, n_rows)
    ratings = np.random.uniform(0.0, 5.0, n_rows)

    ratings_df = pd.DataFrame({
        'user_id': user_ids,
        'item_id': item_ids,
        'rating': ratings
    })

    return ratings_df

class RatingsDataset(Dataset):
    def __init__(self, ratings_df):
        self.users = ratings_df['user_id'].values
        self.items = ratings_df['item_id'].values
        self.ratings = ratings_df['rating'].values

    def __len__(self):
        return len(self.ratings)

    def __getitem__(self, idx):
        return self.users[idx], self.items[idx], self.ratings[idx]
```

Next, let's create the `src/model.py` file:

src/model.py
```python
import torch
from torch import nn

class MatrixFactorization(nn.Module):
    def __init__(self, n_users, n_items, n_factors=100):
        super().__init__()
        self.user_factors = nn.Embedding(n_users, n_factors)
        self.item_factors = nn.Embedding(n_items, n_factors)

    def forward(self, user, item):
        return (self.user_factors(user) * self.item_factors(item)).sum(1)
```

Finally, let's create the `src/train.py` file:

src/train.py
```python
import torch
from torch import optim
from torch.utils.data import DataLoader
from tqdm import tqdm
from src.data import generate_ratings, RatingsDataset
from src.model import MatrixFactorization

# Set device
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Generate ratings
ratings_df = generate_ratings()

# Create dataset and dataloader
dataset = RatingsDataset(ratings_df)
dataloader = DataLoader(dataset, batch_size=64, shuffle=True)

# Create model
model = MatrixFactorization(1000, 1000).to(device)

# Define loss and optimizer
criterion = torch.nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

# Training loop
for epoch in tqdm(range(100)):
    for user, item, rating in dataloader:
        # Move data to device
        user = user.to(device)
        item = item.to(device)
        rating = rating.float().to(device)

        # Forward pass
        outputs = model(user, item)
        loss = criterion(outputs, rating)

        # Backward pass and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch {epoch+1}/{100}, Loss: {loss.item()}')

# Save the model
torch.save(model.state_dict(), './model.pth')

print('Training complete. Model saved to ./model.pth')
```

This concludes a fully working implementation.